---
////////////////////////////console.log("SLIDER")
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import fs from 'node:fs/promises';
import { parse as parseYaml } from "yaml";

// import functions for translation as well as dictionary file
import { getLangFromUrl, getSlugNoLangFromUrl, useTranslations, useTranslatedPath } from '@/i18n/langFunctions';
import { languages } from '@/i18n/dict';
// get language and slug from url
const lang = getLangFromUrl(Astro.url);
const slug = getSlugNoLangFromUrl(Astro.url);
// t will access the dictionary according to the lang passed here
const t = useTranslations(lang);

import { getCollection } from 'astro:content';

const lB = await getCollection('lilBits');
const tSources = lB.filter(entry => {
	//////////////////console.log("entry");
	//////////////////console.log(entry.id);
	return entry.id == "sources";
})[0].data;


const { items, interval = 5000, aspect, capAlt, dataFile} = Astro.props;
//const STRAPI_BASE_URL = import.meta.env.STRAPI_BASE_URL || "http://localhost:1337";
const sliderId = `slider-${Math.random().toString(36).substr(2, 9)}`;

//////////////////////////console.log("capAlt");
//////////////////////////console.log(capAlt);

////////////////////////////console.log("itemsJustImportant");
////////////////////////////console.log(itemsOriginal);
//var items = ["hhh"];

var navButtons = "";
var navIndicators = "";

//////////////////////console.log("capAlt");
//////////////////////console.log(capAlt);

//////////////////////console.log("items1");
//////////////////////console.log(items);
for(let i = 0; i < items.length; i++ ){
  items[i].data = dataFile[i];
}
//////////////////////console.log("items2");
//////////////////////console.log(items);
for(let i = 0; i < items.length; i++ ){
  items[i].capAlt = capAlt[i];
}
//////////////////////console.log("items3");
//////////////////////console.log(items);

---


<div class="hidden"></div>
<div class="hidden aspect-square"></div>
<div class="hidden aspect-4/3"></div>
<div class="hidden aspect-3/4"></div>
<div class="hidden aspect-3/2"></div>
<div class="hidden aspect-2/3"></div>
<div class="hidden aspect-16/9"></div>
<div class="hidden aspect-9/16"></div>
<div class="hidden max-h-0"></div>
<div class="hidden scale-y-0"></div>
<div class="hidden bg-red-800"></div>

<div class="mb-5">
<div class={aspect && "grid custom-slider relative w-full overflow-hidden shadow-lg my-3 bg-secondary aspect-"+aspect || "grid custom-slider relative w-full overflow-hidden shadow-lg my-3 bg-secondary"} id={sliderId}>
  {items.map((thisImage, index) => (
    <div
      class="row-span-1 row-start-1 col-span-1 col-start-1 slider-container top-0 left-0 w-full h-full object-cover opacity-0 transition-opacity duration-500 ease-in-out invisible"
      data-slider-container
    >

      <Image
        src={thisImage}
        alt={thisImage.capAlt.alt || thisImage.data.generic_alt[lang] || ""}
        height="1080"
        class="slider-image medium-zoomable top-0 left-0 w-full h-full object-cover"
        data-slider-image
        data-index={index}
        medium-zoomable
      />

      {//thisImage.caption != "" && 
        /*<div class="caption absolute bottom-0 w-full h-fit p-4 bg-slate-100">
          {thisImage.caption || ""}
        </div>*/
      }
    </div>
  ))}

  
  
  <!-- Navigation buttons -->
  <button class="slider-prev absolute top-1/2 left-4 transform -translate-y-1/2 bg-primary bg-opacity-75 hover:bg-opacity-100 all-neutral-dark rounded-full p-3 shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-focus" data-slider-prev>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button class="slider-next absolute top-1/2 right-4 transform -translate-y-1/2 bg-primary bg-opacity-75 hover:bg-opacity-100 all-neutral-dark rounded-full p-3 shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-focus" data-slider-next>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>
  
  <!-- indicators and caption -->
  <div class="flex flex-col flex-wrap absolute bottom-0 w-full transition-all duration-150 ease">
    <!-- Slide indicators -->
    <div class="mx-auto my-2 flex space-x-3 z-10 w-full justify-center">
      {items.map((_, index) => (
        <button class="slider-indicator w-3 h-3 rounded-full bg-primary bg-opacity-50 hover:bg-opacity-100 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-focus" style="z-index: 0;" data-slider-indicator data-index={index}></button>
      ))}
    </div>
    <!-- caption -->
    <div class="caption-outer caption grid text-sm w-full z-10 h-fit transition-all duration-50 ease-in-out p-3" caption-outer-container>
      <div class="caption-inner grid grid-cols-1 grid-rows-1 bg-complementary-opposite-yellow transition-all duration-500 ease-in-out h-fit py-2" caption-inner-container>
        {items.map((thisImage, index) => (
          <div class="invisible overflow-hidden transition-all ease-in-out duration-300 delay-0 opacity-0 mx-0 mb-0 order-1 px-4 h-0 max-h-8 [grid-area: 1/1/1/1] text-neutral-dark" data-index={index}><span>{thisImage.capAlt.caption || thisImage.data.generic_caption[lang] || " " }</span><span class="ref float-right">
            {thisImage.data.source_url && thisImage.data.attribute != "dont" &&
              <a href={thisImage.data.source_url}>
                {thisImage.data.author && "   " + /*tSources.byAuthor[lang] +*/ " " + thisImage.data.author}{thisImage.data.author && thisImage.data.source_name && ", "}{thisImage.data.source_name && thisImage.data.source_name}
              </a>
            }
            {!(thisImage.data.source_url) && thisImage.data.attribute != "dont" &&
              <span>
                {thisImage.data.author && "   " + /*tSources.byAuthor[lang] +*/" " + thisImage.data.author}{thisImage.data.author && thisImage.data.source_name && ", "}{thisImage.data.source_name && thisImage.data.source_name}
              </span>
            }
            </span></div>
        ))}
      </div>
    </div>
  </div>
</div>

<div id={"sliderLower"+sliderId} class="grid">
  <div class="row-span-1 row-start-1 col-span-1 col-start-1 caption-outer-mobile captionMobile text-sm grid w-full z-10 h-fit transition-all duration-[5s] ease-in-out pb-3 -my-3" caption-outer-container-mobile>
    <div class="caption-inner-mobile grid grid-cols-1 grid-rows-1 row-span-1 row-start-1 col-span-1 col-start-1 bg-complementary-opposite-yellow transition-all duration-300 ease-in-out h-fit shadow-lg z-50" caption-inner-container-mobile>
      {items.map((thisImage, index) => (
        <div class="invisible overflow-hidden transition-all ease-in-out duration-300 delay-0 opacity-0 mx-0 mb-0 order-1 px-4 h-0 max-h-0 [grid-area: 1/1/1/1] text-neutral-dark" data-index={index}><span>{thisImage.capAlt.caption || thisImage.data.generic_caption[lang] || " " }</span><span class="ref float-right">
          {thisImage.data.source_url && thisImage.data.attribute != "dont" &&
            <a href={thisImage.data.source_url}>
              {thisImage.data.author && "   " + /*tSources.byAuthor[lang] +*/" " + thisImage.data.author}{thisImage.data.author && thisImage.data.source_name && ", "}{thisImage.data.source_name && thisImage.data.source_name}
            </a>
          }
          {!(thisImage.data.source_url) && thisImage.data.attribute != "dont" &&
            <span>
              {thisImage.data.author && "   " + /*tSources.byAuthor[lang] +*/" " + thisImage.data.author}{thisImage.data.author && thisImage.data.source_name && ", "}{thisImage.data.source_name && thisImage.data.source_name}
            </span>
          }
          </span></div>
      ))}
    </div>
  </div>
  <!-- just for height -->
  <div class="invisible opacity-0 row-span-1 row-start-1 col-span-1 col-start-1 caption-outer-mobile captionMobile text-sm grid w-full z-10 h-fit transition-all duration-[5s] ease-in-out pb-3 -my-3" caption-outer-container-mobile>
    <div class="caption-inner-mobile grid grid-cols-1 grid-rows-1 row-span-1 row-start-1 col-span-1 col-start-1 bg-complementary-split-pink transition-all duration-300 ease-in-out h-fit z-50" caption-inner-container-mobile>
      {items.map((thisImage, index) => (
        <div class="row-span-1 row-start-1 col-span-1 col-start-1 overflow-hidden transition-all ease-in-out duration-300 delay-0 opacity-50 mx-0 mb-0 order-1 px-4 [grid-area: 1/1/1/1] text-neutral-dark py-3" data-index={index}><span>{thisImage.capAlt.caption || thisImage.data.generic_caption[lang] || " " }</span><span class="ref float-right">
          {thisImage.data.source_url && thisImage.data.attribute != "dont" &&
            <a href={thisImage.data.source_url}>
              {thisImage.data.author && "   " + /*tSources.byAuthor[lang] +*/" " + thisImage.data.author}{thisImage.data.author && thisImage.data.source_name && ", "}{thisImage.data.source_name && thisImage.data.source_name}
            </a>
          }
          {!(thisImage.data.source_url) && thisImage.data.attribute != "dont" &&
            <span>
              {thisImage.data.author && "   " + /*tSources.byAuthor[lang] +*/" " + thisImage.data.author}{thisImage.data.author && thisImage.data.source_name && ", "}{thisImage.data.source_name && thisImage.data.source_name}
            </span>
          }
          </span></div>
      ))}
    </div>
  </div>

</div>

<script define:vars={{ interval, sliderId, items }}>
  window.addEventListener("load", (event) => {
    //////console.log("page is fully loaded");
  

  //////console.log("sliderId: ");
  //////console.log(sliderId);
  //////console.log("items: ");
  //////console.log(items);
  //////console.log("interval: ");
  //////console.log(interval);
  const sliderContainer = document.getElementById(sliderId);
  const sliderLower = document.getElementById("sliderLower"+sliderId);
  //////console.log("sliderContainer");
  //////console.log(sliderContainer);
  sliderContainer.addEventListener('mouseenter', () => {
    //////console.log("click");
    //prevSlide();
    //startAutoslide();
  });
  const slides = sliderContainer.querySelectorAll('.slider-container');
  const prevButton = sliderContainer.querySelector('.slider-prev');
  const nextButton = sliderContainer.querySelector('.slider-next');
  const indicators = sliderContainer.querySelectorAll('.slider-indicator');
  const captionInner = sliderContainer.querySelectorAll('.caption-inner');
  const captionOuter = sliderContainer.querySelectorAll('.caption-outer');
  const captionInnerMobile = sliderLower.querySelectorAll('.caption-inner-mobile');
  const captionOuterMobile = sliderLower.querySelectorAll('.caption-outer-mobile');
  //////console.log("slides");
  //////console.log(slides);
  //////console.log("prevButton");
  //////console.log(prevButton);
  //////console.log("nextButton");
  //////console.log(nextButton);
  //////console.log("indicators");
  //////console.log(indicators);
  //////console.log("captionInner");
  //////console.log(captionInner);
  //////console.log("captionOuter");
  //////console.log(captionOuter);
  //////console.log("captionInnerMobile");
  //////console.log(captionInnerMobile);
  //////console.log("captionOuterMobile");
  //////console.log(captionOuterMobile);

  //////console.log("doing it");
  var currentSlide = 0;
  var intervalId;

  function showSlide(index) {
    ////console.log("showSlide: "+index);
    ////console.log("removing slide: "+currentSlide);
    slides[currentSlide].classList.remove('opacity-100');
    slides[currentSlide].classList.add('opacity-0');
    slides[currentSlide].classList.add('invisible');
    indicators[currentSlide].classList.remove('bg-opacity-100');
    indicators[currentSlide].classList.add('bg-opacity-50');

    ////console.log("captionInner[0]");
    ////console.log(captionInner[0]);
    
    captionInner[0].children[currentSlide].classList.add("invisible");
    //captionInner[0].children[currentSlide].classList.remove("flex");
    captionInner[0].children[currentSlide].classList.add("opacity-0");
    captionInner[0].children[currentSlide].classList.remove("opacity-100");
    captionInner[0].children[currentSlide].classList.remove("max-h-96");
    captionInner[0].children[currentSlide].classList.add("h-0");
    captionInner[0].children[currentSlide].classList.remove("h-fit");
    captionInner[0].children[currentSlide].classList.add("max-h-0");
    captionInner[0].children[currentSlide].classList.remove("py-3");

    captionInnerMobile[0].children[currentSlide].classList.add("invisible");
    captionInnerMobile[0].children[currentSlide].classList.add("opacity-0");
    captionInnerMobile[0].children[currentSlide].classList.remove("opacity-100");
    captionInnerMobile[0].children[currentSlide].classList.remove("max-h-96");
    captionInnerMobile[0].children[currentSlide].classList.add("h-0");
    captionInnerMobile[0].children[currentSlide].classList.remove("h-fit");
    captionInnerMobile[0].children[currentSlide].classList.add("max-h-0");
    captionInnerMobile[0].children[currentSlide].classList.remove("py-3");

    ////console.log("finishing slide: "+currentSlide);
    currentSlide = index;
    ////console.log("now doing slide: "+currentSlide);
    
    slides[currentSlide].classList.remove('opacity-0');
    slides[currentSlide].classList.add('opacity-100');
    slides[currentSlide].classList.remove('invisible');
    indicators[currentSlide].classList.remove('bg-opacity-50');
    indicators[currentSlide].classList.add('bg-opacity-100');

    captionInner[0].children[currentSlide].classList.remove("invisible");
    //captionInner[0].children[currentSlide].classList.add("flex");
    captionInner[0].children[currentSlide].classList.remove("opacity-0");
    captionInner[0].children[currentSlide].classList.add("opacity-100");
    captionInner[0].children[currentSlide].classList.add("max-h-96");
    captionInner[0].children[currentSlide].classList.remove("h-0");
    captionInner[0].children[currentSlide].classList.add("h-fit");
    captionInner[0].children[currentSlide].classList.remove("max-h-0");
    captionInner[0].children[currentSlide].classList.add("py-3");

    captionInnerMobile[0].children[currentSlide].classList.remove("invisible");
    //captionInnerMobile[0].children[currentSlide].classList.add("flex");
    captionInnerMobile[0].children[currentSlide].classList.remove("opacity-0");
    captionInnerMobile[0].children[currentSlide].classList.add("opacity-100");
    captionInnerMobile[0].children[currentSlide].classList.add("max-h-96");
    captionInnerMobile[0].children[currentSlide].classList.remove("h-0");
    captionInnerMobile[0].children[currentSlide].classList.add("h-fit");
    captionInnerMobile[0].children[currentSlide].classList.remove("max-h-0");
    captionInnerMobile[0].children[currentSlide].classList.add("py-3");

    ////console.log("finishing slide: "+currentSlide);

    items[currentSlide].caption == null && captionInner[0].children[currentSlide].classList.remove("py-3");
    //singleimage[currentSlide].caption == null && captionInnerMobile[0].children[currentSlide].classList.remove("py-3");

    if(items.length < 2){
      hideNavUI();
    } 
  }
  var xyz = 0;
  //////console.log("still doing it --> "+xyz);

  function hideNavUI(){
    indicators[0].classList.add('hidden');
    prevButton.classList.add('hidden');
    nextButton.classList.add('hidden');
  }

  xyz++;
  //////console.log("still doing it --> "+xyz);

  function nextSlide() {
    //////console.log("nextSlide");
    showSlide((currentSlide + 1) % slides.length);
  }

  xyz++;
  //////console.log("still doing it --> "+xyz);

  function prevSlide() {
    //////console.log("prevSlide");
    showSlide((currentSlide - 1 + slides.length) % slides.length);
  }

  xyz++;
  //////console.log("still doing it --> "+xyz);

  function startAutoslide() {
    //////console.log("startAutoslide");
    intervalId = setInterval(nextSlide, interval);
  }

  xyz++;
  //////console.log("still doing it --> "+xyz);

  function stopAutoSlide() {
    //////console.log("stopAutoSlide");
    clearInterval(intervalId);
  }

  xyz++;
  //////console.log("still doing it --> "+xyz);

  prevButton.addEventListener('click', () => {
    //////console.log("prevButton");
    prevSlide();
    stopAutoSlide();
    //startAutoslide();
  });

  xyz++;
  //////console.log("still doing it --> "+xyz);

  //////console.log("nextButton");
  //////console.log(nextButton);
  nextButton.addEventListener("click", function(){
    //////console.log("nextButton");
    nextSlide();
    stopAutoSlide();
    //startAutoslide();
  });

  xyz++;
  //////console.log("still doing it --> "+xyz);

  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      showSlide(index);
      stopAutoSlide();
      //startAutoslide();
    });
  });

  xyz++;
  //////console.log("still doing it --> "+xyz);

  sliderContainer.addEventListener('mouseenter', stopAutoSlide);
  //sliderContainer.addEventListener('mouseleave', startAutoslide);
  xyz++;
  //////console.log("still doing it --> "+xyz);

  showSlide(0);

  xyz++;
  //////console.log("still doing it --> "+xyz+" --> fini");

  });

</script>

<style>
  .medium-zoom-overlay{z-index:5;backdrop-filter: blur(3px);position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{z-index: 99;cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{z-index:101;position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}

  @media screen and (min-width: 768px) {
    /*switch for alternative caption within image in bigger mode*/
    .caption {
      display: none;
    }
    .captionMobile {
      display: relative;
    }
  }
  @media screen and (max-width: 768px) {
    .caption {
      display: none;
    }
    .captionMobile {
      display: relative;
    }
  }


</style>


<script>
  

  //medium zoom is the zoom library.
  import mediumZoom from 'medium-zoom';
  //const bg = await "#"+document.getElementById("bgcolor").innerHTML;
  //////////////////////////////////////console.log("bg: "+bg);
  const zoom = await mediumZoom('[medium-zoomable]', {
    margin: 0,
    background: "#fafafaed",
    /*opacity: "0.5",*/
    /*isTailWind: false,
    background: bg+"70",
    bgfilter: "blur(3px)",*/
  });

  const prevButtonsAll = document.querySelectorAll('.slider-prev');
  const nextButtonsAll = document.querySelectorAll('.slider-next');
  const indicatorsAll = document.querySelectorAll('.slider-indicator');
  const captionOutersAll = document.querySelectorAll('.caption-outer');
  const customSlidersAll = document.querySelectorAll('.custom-slider');
  


  zoom.on('open', event => {
    // track when the image is zoomed
    //////////////////////////////////////console.log("open");
    prevButtonsAll.forEach(node => {
      node.classList.add('opacity-0');
      node.classList.add('invisible');
    });
    nextButtonsAll.forEach(node => {
      node.classList.add('opacity-0');
      node.classList.add('invisible');
    });
    indicatorsAll.forEach(node => {
      node.classList.add('opacity-0');
      node.classList.add('invisible');
    });
    captionOutersAll.forEach(node => {
      node.classList.add('opacity-0');
      node.classList.add('invisible');
      node.classList.add('scale-y-0');
      node.classList.add('translate-y-full');
    });
    customSlidersAll.forEach(node => {
      node.classList.remove('bg-secondary');
      node.classList.remove('shadow-lg');
    });
  })

  zoom.on('closed', event => {
    // track when the image has finished closing
    //////////////////////////////////////console.log("closed");
    prevButtonsAll.forEach(node => {
      node.classList.remove('opacity-0');
      node.classList.remove('invisible');
    });
    nextButtonsAll.forEach(node => {
      node.classList.remove('opacity-0');
      node.classList.remove('invisible');
    });
    indicatorsAll.forEach(node => {
      node.classList.remove('opacity-0');
      node.classList.remove('invisible');
    });
    captionOutersAll.forEach(node => {
      node.classList.remove('opacity-0');
      node.classList.remove('invisible');
      node.classList.remove('scale-y-0');
      node.classList.remove('translate-y-full');
    });
    customSlidersAll.forEach(node => {
      node.classList.add('bg-secondary');
      node.classList.add('shadow-lg');
    });
  })

</script>