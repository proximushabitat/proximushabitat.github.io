---

import { getCollection, render } from 'astro:content';
import { getLangFromUrl } from '@/i18n/langFunctions';
import { sortSmallFirst } from '@/snippets/numberGames';
import { defineConfig } from 'astro/config';
import { translatePath } from '@/i18n/langFunctions';
import { Image } from 'astro/components/Image.astro';

import languageIcon from "@/assets/for_site/planetli.svg?raw";

//aos
import { aosDuration, aosDelay } from '@/snippets/aosValues';

//////////////////console.log.log("translatePath");
const translationPaths = await translatePath(Astro.url);


const lang = getLangFromUrl(Astro.url);
////////////////////console.log.log("lang");
////////////////////console.log.log(lang);


const sectionsAllLang = await getCollection('sections');
const lB = await getCollection('lilBits');

////////////////////console.log.log("lB");
////////////////////console.log.log(lB);

const tNav = lB.filter(entry => {
	////////////////////console.log.log("entry");
	////////////////////console.log.log(entry.id);
	return entry.id == "nav";
})[0].data;


const { slug, page, pages } = Astro.props;

const sectionsThisLang = sectionsAllLang.filter(section => {
	const sectionFilePath = section.filePath.split('/');
	const sectionLang = sectionFilePath[sectionFilePath.length - 2];
	////////////////////console.log.log("sectionLang: "+sectionLang+" lang: "+lang);
	return sectionLang == lang;
});

////////////////////console.log.log("sectionsThisLang");
////////////////////console.log.log(sectionsThisLang);

const sectionsInclude = sectionsThisLang.filter(section => section.data.menu_include == true);
//////////////console.log.log("sectionsInclude");
//////////////console.log.log(sectionsInclude);
const sectionsOrdered = sortSmallFirst(sectionsInclude, "menu_order");

//////////////console.log.log("sectionsOrdered");
//////////////console.log.log(sectionsOrdered);

//////////////////////console.log.log("sectionsThisLang");
//////////////////////console.log.log(sectionsThisLang);

////////////////////console.log.log("Astro.url");
////////////////////console.log.log(Astro.url.host);

var frag4Large = "<span><a href='/"+lang+"/'>"+tNav.ind[lang]+"</a></span>";

for (let i = 0; i < sectionsOrdered.length; i++) {
	frag4Large += "<span>";
	frag4Large += "&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;"
	frag4Large += "</span>";
	frag4Large += "<span>";
	frag4Large += "<a href=\"/"+lang+"/"+sectionsOrdered[i].data.slug+"\">";
	frag4Large += sectionsOrdered[i].data.title;
	frag4Large += "</a>";
	frag4Large += "</span>";
}

var lang4Large = "";
//////////////////console.log.log("translationPaths");
//////////////////console.log.log(translationPaths);
for(let i = 0; i < translationPaths.length; i++){
	if(i != 0){
		lang4Large += "<span>";
		lang4Large += "&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;"
		lang4Large += "</span>";
	}
	lang4Large += "<span>";
	lang4Large += "<a href=\"/"+translationPaths[i].path+"\">";
	lang4Large += translationPaths[i].locale;
	lang4Large += "</a>";
	lang4Large += "</span>";
}



var frag4Small = "<div class='w-fit'>";
frag4Small += "&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;";
frag4Small += "<span><a href='/"+lang+"/'>"+tNav.ind[lang]+"</a></span>";
frag4Small += "&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;";
frag4Small += "</div>";

for (let i = 0; i < sectionsOrdered.length; i++) {
	frag4Small += "<div class='w-fit'>";
	frag4Small += "<span>";
	frag4Small += "&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;";
	frag4Small += "</span>";
	frag4Small += "<span>";
	frag4Small += "<a href=\"/"+lang+"/"+sectionsOrdered[i].data.slug+"\">";
	frag4Small += sectionsOrdered[i].data.title;
	frag4Small += "</a>";
	frag4Small += "</span>";
	frag4Small += "<span>";
	frag4Small += "&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;";
	frag4Small += "</span>";
	frag4Small += "</div>";
}


var lang4Small = "";
//////////////////console.log.log("translationPaths");
//////////////////console.log.log(translationPaths);
for(let i = 0; i < translationPaths.length; i++){
	lang4Small += "<div class'w-fit'>";
	//if(i != 0){
		lang4Small += "<span>";
		lang4Small += "&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;"
		lang4Small += "</span>";
	//}
	lang4Small += "<span>";
	lang4Small += "<a href=\"/"+translationPaths[i].path+"\">";
	lang4Small += translationPaths[i].locale;
	lang4Small += "</a>";
	lang4Small += "</span>";
	lang4Small += "<span>";
	lang4Small += "&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;"
	lang4Small += "</span>";
	lang4Small += "</div>";
}

////////////////////console.log.log("Astro.url");
////////////////////console.log.log(Astro.url.pathname);

//////////////////console.log.log("languageIcon");
//////////////////console.log.log(languageIcon);

---

<div class="hidden h-fit"></div>
<div class="hidden h-0"></div>
<div class="hidden h-designLineMenu"></div>
<div class="hidden max-h-0"></div>
<div class="hidden max-h-20"></div>

<div class="w-full hidden md:flex flex-row max-h-6 mb-2">
	<div class="mx-auto w-fit flex flex-row">
		<span class="flex flex-row">
			<Fragment set:html={frag4Large} />
		</span>
		<span class="flex flex-row">
			&nbsp;&nbsp;&nbsp;•
			<span class="wantLang cursor-pointer flex flex-row  transition-all max-w-36 overflow-hidden">
				&nbsp;&nbsp;&nbsp;
				<!-- <svg width="10px" height="10px" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" fill="blue">
					<object data={languageIcon.src} width="100%" height="100%"></object>
				</svg> -->
				<a>
					<Fragment set:html={languageIcon} />
				</a>
				
				<!-- <img
					src={languageIcon.src}
					alt="other languages"
					style="fill:blue"
					class="h-5 w-5"
				/> -->
			</span>
			<span class="chooseLang max-w-0 flex flex-row overflow-hidden  transition-all" style="fill: blue;">
				&nbsp;&nbsp;&nbsp;
				<Fragment set:html={lang4Large}/>
			</span>
		</span>
	</div>

	
</div>

<div class="w-full flex flex-col md:hidden">
	<div class="w-full flex flex-col">
		<div class="mx-auto w-fit mb-2 flex flex-row">
			<span>&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;</span>
			<a class="cursor-pointer" id="mobileMenuButton">
				{tNav.menu[lang]}
			</a>
			<span>&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;</span>
			<a class="cursor-pointer" id="mobileLangButton">
				<Fragment set:html={languageIcon} />
			</a>
			<span>&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;&nbsp;</span>
		</div>
	</div>
	<div
		data-aos="fade-up"
		data-aos-duration={aosDuration(3)}>
		<div class="menuLine bg-black w-full h-designLineMenu max-h-0 transition-all">
		</div>
	</div>
	<div class="w-full flex flex-col">
		<div id="mobileMenuContent" class="mx-auto transition-all w-fit flex flex-col overflow-hidden h-fit max-h-0 items-center space-y-4 my-0">
			<Fragment set:html={frag4Small} />
		</div>
	</div>
	<div class="w-full flex flex-col">
		<div id="mobileLangContent" class="mx-auto transition-all w-fit flex flex-col overflow-hidden h-fit max-h-0 items-center space-y-4 my-0">
			<Fragment set:html={lang4Small} />
		</div>
	</div>
</div>

<script>
//import type { swapBodyElement } from "astro/virtual-modules/transitions-swap-functions.js";

	const dT = document.getElementById("designTop");

	const mMB = document.getElementById("mobileMenuButton");
	const mMC = document.getElementById("mobileMenuContent");

	const mLB = document.getElementById("mobileLangButton");
	const mLC = document.getElementById("mobileLangContent");

	const wLD = document.querySelector(".wantLang");
	const aLD = document.querySelector(".chooseLang");

	const mL = document.querySelector(".menuLine");

	//handle lines from DesignTop
	const lC = dT.querySelector(".linesContainer");
	//console.log(lC);
	const tH = lC.attributes["data-totalHeight"].nodeValue;
	//console.log("totalHeight: "+tH);
	const sL = lC.querySelectorAll(".putLineSpacer");


	//desktop languages
	wLD.addEventListener("click", function(){
		aLD.classList.remove("max-w-0");
		wLD.classList.remove("max-w-36");
		aLD.classList.add("max-w-36")
		wLD.classList.add("max-w-0")
	});
	
	//mobile menu
	const body = document.querySelector("body");
	var menuState = "closed";
	mMB.addEventListener("click", function(){
		//////////////////console.log.log("menu => menu: "+menuState+" lang: "+langState);
		////////////////////console.log.log("clicked");
		if(menuState == "closed"){
			//////////////////console.log.log("menu is closed => menu: "+menuState+" lang: "+langState);
			if(langState == "open"){
				//////////////////console.log.log("close the lang");
				closeLang();
				langState = "closed";
			}
			openMenu();
			menuState = "open";
			showLine();collapseLines();
			//////////////////console.log.log("menu has been opened => menu: "+menuState+" lang: "+langState);
		} else {
			//////////////////console.log.log("menu is open => menu: "+menuState+" lang: "+langState);
			closeMenu();
			menuState = "closed";
			hideLine();accordeonLines();
			//////////////////console.log.log("menu has been closed => menu: "+menuState+" lang: "+langState);
		}
	});
	

	function closeMenu(){
		mMC.classList.add("max-h-0");
		mMC.classList.remove("max-h-20");
		mMC.classList.add("my-0");
		mMC.classList.remove("my-4");
	}
	function openMenu(){
		mMC.classList.remove("max-h-0");
		mMC.classList.add("max-h-20");
		mMC.classList.remove("my-0");
		mMC.classList.add("my-4");
	}

	//mobile lang
	var langState = "closed";
	mLB.addEventListener("click", function(){
		//////////////////console.log.log("lang => menu: "+menuState+" lang: "+langState);
		////////////////////console.log.log("clicked");
		if(langState == "closed"){
			//////////////////console.log.log("lang is closed => menu: "+menuState+" lang: "+langState);
			if(menuState == "open"){
				//////////////////console.log.log("close the menu");
				closeMenu();
				menuState = "closed";
			}
			openLang();
			langState = "open";
			showLine();collapseLines();
			//////////////////console.log.log("lang has been opened => menu: "+menuState+" lang: "+langState);
		} else {
			//////////////////console.log.log("lang is open => menu: "+menuState+" lang: "+langState);
			closeLang();
			langState = "closed";
			hideLine();accordeonLines();
			//////////////////console.log.log("lang has been closed => menu: "+menuState+" lang: "+langState);
		}
	});

	function closeLang(){
		mLC.classList.add("max-h-0");
		mLC.classList.remove("max-h-20");
		mLC.classList.add("my-0");
		mLC.classList.remove("my-4");
	}
	function openLang(){
		mLC.classList.remove("max-h-0");
		mLC.classList.add("max-h-20");
		mLC.classList.remove("my-0");
		mLC.classList.add("my-4");
	}

	//handle Line
	function hideLine(){
		if(mL.classList.contains("max-h-designLineMenu")){
			mL.classList.remove("max-h-designLineMenu");
			mL.classList.add("max-h-0");
		}
	}
	function showLine(){
		if(mL.classList.contains("max-h-0")){
			mL.classList.remove("max-h-0");
			mL.classList.add("max-h-designLineMenu");
		}
	}

	//handle design lines
	function collapseLines(){
		//collapse height
		if(!(lC.classList.contains("collapsed"))){
			lC.classList.add("collapsed");
			lC.classList.add("max-h-designLineMenu");
			lC.style.maxHeight="";
		}
		//remove space between
		sL.forEach(line => {
			if(line.classList.contains("mt-designLinesSpaceBetween")){
				line.classList.remove("mt-designLinesSpaceBetween");
				line.classList.add("mt-0");
			}
		});
	}

	function accordeonLines(){
		//collapse height
		if((lC.classList.contains("collapsed"))){
			lC.classList.remove("collapsed");
			lC.classList.remove("max-h-designLineMenu");
			lC.style.maxHeight=tH;
		}
		//remove space between
		sL.forEach(line => {
			if(!line.classList.contains("mt-designLinesSpaceBetween")){
				line.classList.add("mt-designLinesSpaceBetween");
				line.classList.remove("mt-0");
			}
		});
	}
</script>