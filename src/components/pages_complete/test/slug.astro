---
import { getCollection, getEntry, render } from 'astro:content';

import { getTranslations, getItemLang, getPageUrl } from '@snippets/handleCollections';

import BaseLayout from "@layouts/BaseLayout.astro";
import BarsTop3 from "@components/general/BarsTop3.astro";
import Intro from "@components/general/Intro.astro";
import Numbered from "@components/general/Numbered.astro";
import ArticlesNude from "@components/general/ArticlesNude.astro";
import ArticlesImaged from "@components/general/ArticlesImaged.astro";
import BarsBottom3 from "@components/general/BarsBottom3.astro";
import divTitle from "@components/snippets/divTitle.astro";

import ReferenceList from '@components/references/referenceList.astro';

const { lang, slug, page, pages } = Astro.props;

//////////console.log("");
//////////console.log("TEST:ASTRO");
//////////console.log("page");
//////////console.log(page);
//////////console.log("slug");
//////////console.log(slug);
//////////console.log("lang");
//////////console.log(lang);
//////////console.log("pages");
//////////console.log(pages);

////////////console.log("page.filePath");
////////////console.log(page.filePath);
////////////console.log("");

////////////console.log("page.filePath?.split('/')[page.filePath?.split('/').length - 1]");
////////////console.log(page.filePath?.split('/')[page.filePath?.split('/').length - 1]);
//const translations = pages.filter(onePage => onePage.filePath?.split('/')[onePage.filePath?.split('/').length - 1] == page.filePath?.split('/')[page.filePath?.split('/').length - 1])
var translations = getTranslations(page, pages);
translations = translations.filter(translation => translation.data.is_trans_ready == true);

////////////console.log(" ");
////////////console.log("pages");
////////////console.log(pages);
////////////console.log(" ");
//////////console.log("translations");
//////////console.log(translations);

const peops = await getCollection('people');
const sections = await getCollection('sections');

const noTranslation = await getEntry('lilBits', 'noTranslation');
console.log("noTranslation, lang "+lang);
console.log(noTranslation.data.excuse.title[lang]);
////////////console.log("people");
////////////console.log(peops);

////////////console.log("");

const formattedDate = page.data.date_published.toLocaleString(lang);

////////console.log("page");
////////console.log(page);

const { Content } = await render(page);

---


<BaseLayout>
  <BarsTop3 />

  <article class="bg-primary flex flex-col justify-center place-self-center text-justify">
    <div class="px-8 2xl:max-w-7xl mx-auto py-8 w-full">
      <div class="space-y-2 max-w-4xl">
        <!-- div Title and Decorative Elements -->
        <h1>
          {page.data.headline}
        </h1>
        <h2>
          {page.data.drophead}
        </h2>
      </div>
      <div class="max-w-4xl">
        {page.data.lead}
      </div>
      <div class="max-w-3xl mx-auto">

        {page.data.is_trans_ready && <Content />}
        {!page.data.is_trans_ready && 
          <h3>{noTranslation.data.excuse.title[lang]}</h3>
          <p>{noTranslation.data.excuse.text[lang]}</p>
          <h4>{noTranslation.data.excuse.announceOthers[lang]}</h4>
          <ul>
            {translations.map((translation, index) => (
                <li key={index}>
                  <a href={getPageUrl(translation, sections)}>{getItemLang(translation)['full']}</a>
                </li>
              ))
            }
          </ul>
        }
      </div>
    </div>
  </article>

  <ReferenceList />

  <BarsBottom3 />
</BaseLayout>

