---
import { getCollection, getEntry, render } from 'astro:content';
import SectionTitle from "@components/snippets/SectionTitle.astro";
import { getLangFromUrl } from '@/i18n/langFunctions';

const glossaryAllLang = await getCollection('glossary');

const lang = getLangFromUrl(Astro.url);

const lB = await getCollection('lilBits');
const tSources = lB.filter(entry => {
	////////////////////////console.log.log("entry");
	////////////////////////console.log.log(entry.id);
	return entry.id == "glossary";
})[0].data;

const glossary = glossaryAllLang.filter(entry => {
	return entry.id == lang;
})[0].data;

//////////console.log.log("glossary");
//////////console.log.log(glossary);

//aos
import { aosDuration, aosDelay } from '@/snippets/aosValues';

---

<div class="glossaryContainer mt-infoContainer hidden">
	<div class="pb-4">
		<SectionTitle title={tSources.title[lang]} />
	</div>
	<div class="text-left" data-aos="fade-up" data-aos-duration={aosDuration(3)} data-aos-delay={aosDelay(1)}>
		<ul class="glossaryList">
		</ul>
	</div>
</div>
<div class="hidden break-normal select-none"></div>

<script define:vars={{ glossary, lang }} is:inline>

	const article = document.querySelector("#content");
	var articleHTML = article.innerHTML;

	var thisGlossary = {};

	//////////console.log.log("articleHTML: ");
	//////////console.log.log(articleHTML);

	//////////console.log.log("lang: "+lang);
	//////////console.log.log("glossary: ");
	//////////console.log.log(glossary);
	for (const [key, value] of Object.entries(glossary)) {
		//////////console.log.log(`${key}: ${value}`);

		var regex = new RegExp(`${key}`, 'gi'), result, indices = [];
		while ( (result = regex.exec(articleHTML)) ) {
			////////console.log.log(getLastBracket(articleHTML, result.index));
			if(getLastBracket(articleHTML, result.index) == ">"){
				if(getLastClasses(articleHTML, result.index).indexOf('toolTipTip') === -1){
					////console.log("TOOLTIPNO");
					indices.push(result.index);
				}else{
					////console.log("TOOLTIPDETECTED");
				}
				//indices.push(result.index);
			}
		}

		////////console.log.log("indices");
		////////console.log.log(indices);

		for(let i = indices.length; i > 0; i--){
			const index = indices[i-1];
			const endIndex = getWordEndIndex(articleHTML, index);
			const word = articleHTML.substring(index, endIndex+1);//index + key.length);
			////////console.log.log("word");
			////////console.log.log(word);
			var replacement = "";
			replacement += word;
			replacement += "<span class='glossaryWord'>";
			replacement += "<span class='toolTipTool' aria-describedby='toolTip'>";
			replacement += "<span class='toolTipTip bg-tooltip-bg text-tooltip-text text-tooltip text-md border-[0.0px] border-tooltip-border'>";
			replacement += key;
			replacement += " = ";
			replacement += value;
			replacement += "<span class='toolTipArrow bg-tooltip-bg border-b-[0.0px] border-r-[0.0px] border-tooltip-border'></span>";
			replacement += "</span>";
			replacement += "<span class='toolTipSymbol align-top text-xs ml-0.5 select-none' style='display: -webkit-inline-box;'>";
			replacement += "?";//"âœ»";
			replacement += "</span>";
			replacement += "</span>";
			replacement += "</span>";
			//////////console.log.log("replacement");
			//////////console.log.log(replacement);
			articleHTML = articleHTML.substring(0, index) + replacement + articleHTML.substring(endIndex+1);
		}
		//////////console.log.log("  ");

		if(indices.length != 0){
			//////////console.log.log("put "+key+" in glossary");
			Object.assign(thisGlossary, {[key]: value});
		}else{
			//////////console.log.log("don't put "+key+" in glossary");
		}

	}
	article.innerHTML = articleHTML;

	//////////console.log.log("thisGlossary");
	//////////console.log.log(thisGlossary);

	//////////console.log.log("thisGlossary:", JSON.stringify(thisGlossary));

	// Sorting the object by keys
	const thisGlossaryOrdered = Object.keys(thisGlossary)
		.sort() // Sort the keys alphabetically
		.reduce((obj, key) => {
			obj[key] = thisGlossary[key]; // Rebuild the object with sorted keys
			return obj;
		}, {});
	
	var listContent = "";
	for (const [key, value] of Object.entries(thisGlossaryOrdered)){
		listContent += "<li>";
		listContent += "<div class='flex-row w-full mb-2'>";
		listContent += "<span class='font-bold'>";
		listContent += key;
		listContent += ": ";
		listContent += "</span>";
		listContent += "<span>";
		listContent += value;
		listContent += "</span>";
		listContent += "</div>";
		listContent += "</li>";	
	}

	if(listContent != ""){
		const glossaryList = document.querySelector(".glossaryList");
		glossaryList.innerHTML = listContent;
		const glossaryContainer = document.querySelector(".glossaryContainer");
		glossaryContainer.classList.remove("hidden");
	}

	function getWordEndIndex(sentence, charIndex) {
		if (charIndex < 0 || charIndex >= sentence.length) {
			return -1; // Out of bounds
		}

		// Move right to find the end of the word
		let end = charIndex;
		while (end < sentence.length && sentence[end] !== ' ' && sentence[end] !== '<') {
			end++;
		}

		return end - 1; // Return the last character index of the word
	}

	function getLastBracket(sentence, charIndex) {
		if (charIndex < 0 || charIndex >= sentence.length) {
			return null; // Out of bounds
		}

		let lastLessThan = sentence.lastIndexOf('<', charIndex);
		let lastGreaterThan = sentence.lastIndexOf('>', charIndex);

		if (lastLessThan === -1 && lastGreaterThan === -1) {
			return null; // Neither symbol found
		}

		return lastLessThan > lastGreaterThan ? '<' : '>';
	}

	function getLastClasses(sentence, charIndex) {
		////console.log("getLastClasses");
		if (charIndex < 0 || charIndex >= sentence.length) {
			return null; // Out of bounds
		}

		let lastLessThan = sentence.lastIndexOf('<', charIndex);
		let lastGreaterThan = sentence.lastIndexOf('>', charIndex);

		if (lastLessThan === -1 && lastGreaterThan === -1) {
			return null; // Neither symbol found
		}

		////console.log("doing classes");
		let lastClassOccurence = sentence.lastIndexOf('class', lastGreaterThan);
		let priorLessThan = sentence.lastIndexOf('<', lastClassOccurence);
		////console.log("lastClass: " + lastClassOccurence);
		if(lastClassOccurence !== -1){
			let classStart = sentence.indexOf('"', lastClassOccurence);
			let classEnd = sentence.indexOf('"', classStart+1);
			////console.log("classStart: " + classStart);
			////console.log("classEnd: " + classEnd);
			var classText = sentence.substring(classStart+1, classEnd);
			////console.log("classText: " + classText);
			var classes = classText.split(" ");
			////console.log("classes");
			////console.log(classes);
			return classes;
		}
	}

</script>