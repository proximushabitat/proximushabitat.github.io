---
import { getCollection, getEntry, render } from 'astro:content';
import SectionTitle from "@components/snippets/SectionTitle.astro";
import { getLangFromUrl } from '@i18n/langFunctions';

import { formatDate } from '@snippets/numberGames';

const sourcesColl = await getCollection('sources');

const lang = getLangFromUrl(Astro.url);
//////////console.log("lang");
//////////console.log(lang);

const lB = await getCollection('lilBits');
const tSources = lB.filter(entry => {
	////////////////////console.log("entry");
	////////////////////console.log(entry.id);
	return entry.id == "sources";
})[0].data;
//////////console.log("tSources");
//////////console.log(tSources.seeSource[lang]);
////////////////////////////console.log("sourcesColl");
////////////////////////////console.log(sourcesColl);

//aos
import { aosDuration, aosDelay } from '@/snippets/aosValues';
---

<div class="referenceContainer mt-infoContainer hidden">
	<div class="pb-4">
		<SectionTitle title={tSources.title[lang]} />
	</div>
	<div class="text-left" data-aos="fade-up" data-aos-duration={aosDuration(3)} data-aos-delay={aosDelay(1)}>
		<ul class="referenceList">
		</ul>
	</div>
</div>
<div class="hidden flex-row w-full  min-w-6 mb-2"></div>
<div class="hidden break-normal"></div>


<script define:vars={{ sourcesColl, tSources, lang }} is:inline>
	////////////////////////////console.log("sourcesColl");
	////////////////////////////console.log(sourcesColl);
	const references = document.querySelectorAll(".reference");
	const container = document.querySelector(".referenceContainer");
	const list = document.querySelector(".referenceList");
	////////////////////////////console.log("references");
	////////////////////////////console.log(references);

	if(references.length > 0){
		container.classList.remove("hidden")
	}else{
		////////////////////////////console.log("no references");
	}

	var sourceIds = [];

	for(let i = 0; i < references.length; i++){
		const idRaw = references[i].attributes['data-ref-id'].nodeValue;
		if(!sourceIds.includes(idRaw)){
			sourceIds.push(idRaw);
		}
	}
	
	//////////console.log("sourceIds");
	//////////console.log(sourceIds);

	for(let i = 0; i < references.length; i++){
		const idRaw = references[i].attributes['data-ref-id'].nodeValue;
		//////////console.log("idRaw : "+idRaw);
		const thisSourceData = sourcesColl.filter(source => source.id == idRaw);
		//////////console.log("thisSourceData");
		//////////console.log(thisSourceData);
		var floaty = "";
		floaty += "<span class='toolTipTool' aria-describedby='toolTip'>";
		if(thisSourceData[0]){
			floaty += "<span class='toolTipTip bg-tooltip-bg text-tooltip-text text-tooltip border-1 border-primary'>";
			floaty += tSources.tooltip[lang];
			floaty += ": ";
			floaty += thisSourceData[0].data.title;
			floaty += "<span class='toolTipArrow bg-tooltip-bg border-b-1 border-r-1 border-primary'></span>";
			floaty += "</span>";
		}
		floaty += "<span class='align-top text-xs ml-0.5'>";
		floaty += sourceIds.indexOf(idRaw) + 1;
		floaty += "</span>";
		floaty += "</span>";
		references[i].innerHTML = /*sourceIds.indexOf(idRaw) + 1 + " floaty: " +*/ floaty;
	}

	var listContent = "";
	for(let i = 0; i < sourceIds.length; i++){
		////////////////////////////console.log("sourceIds[i]");
		////////////////////////////console.log(sourceIds[i]);
		const thisSourceData = sourcesColl.filter(source => source.id == sourceIds[i]);
		////////////////////////////console.log("thisSourceData");
		////////////////////////////console.log(thisSourceData);
		var thisSourceContent = "<li class='break-normal'>";
		thisSourceContent += "<div class='flex flex-row w-full mb-2'>"
		thisSourceContent += "<div class='min-w-6'>"
		thisSourceContent += "<span class='font-bold'>";
		thisSourceContent += i + 1;
		thisSourceContent += ": ";
		thisSourceContent += "</span>";
		thisSourceContent += "</div>"
		thisSourceContent += "<div class='w-full'>"
		thisSourceContent += "<div class=''>"
		//source content after start into new var
		//if not like after start, add comma in front of information
		
		if(thisSourceData[0].data.author){
			thisSourceContent += thisSourceData[0].data.author;
			thisSourceContent += ": ";
		}
		if(thisSourceData[0].data.title){
			thisSourceContent += '<span class="italic">';
			thisSourceContent += thisSourceData[0].data.title;
			thisSourceContent += '</span>';
		}
		if(thisSourceData[0].data.publication){
			thisSourceContent += ", ";
			thisSourceContent += thisSourceData[0].data.publication;
		}
		if(thisSourceData[0].data.date){
			thisSourceContent += " (";
			thisSourceContent += formatDateLocal(thisSourceData[0].data.date, lang);
			thisSourceContent += ")";
		}
		if(thisSourceData[0].data.title){
			//thisSourceContent += ', ';
		}
		/*thisSourceContent += "</div>"
		thisSourceContent += "<div class=''>"*/
		if(thisSourceData[0].data.publication){
			//thisSourceContent += thisSourceData[0].data.publication;
			//thisSourceContent += ", ";
		}
		if(thisSourceData[0].data.url){
			thisSourceContent += ", ";
			thisSourceContent += "<a class='inline-block' href='";
			thisSourceContent += thisSourceData[0].data.url;
			thisSourceContent += "'>";
			thisSourceContent += tSources.original[lang];
			thisSourceContent += "&nbsp; ↗";
			thisSourceContent += "</a>";
		}
		if(thisSourceData[0].data.archiveUrl){
			thisSourceContent += ", ";
			thisSourceContent += "<a class='inline-block' href='";
			thisSourceContent += thisSourceData[0].data.archiveUrl;
			thisSourceContent += "'>";
			thisSourceContent += tSources.archived[lang];
			thisSourceContent += "&nbsp; ↗";
			thisSourceContent += "</a>";
		}

		/*if(thisSourceData[0].data.url){
			thisSourceContent += thisSourceData[0].data.url;
			thisSourceContent += ", ";
		}
		if(thisSourceData[0].data.archived && thisSourceData[0].data.archiveUrl){
			thisSourceContent += thisSourceData[0].data.archiveUrl;
			thisSourceContent += ", ";
		}
		if(thisSourceData[0].data.archived && thisSourceData[0].data.archiveDate){
			thisSourceContent += thisSourceData[0].data.archiveDate;
			thisSourceContent += ", ";
		}*/
		
		thisSourceContent += "</div>"
		thisSourceContent += "</div>";
		thisSourceContent += "</li>";
		listContent += thisSourceContent;
	}

	////////////////////////////console.log("listContent");
	////////////////////////////console.log(listContent);

	list.innerHTML = listContent;

	function formatDateLocal(dateString, lang) {
		//console.log("gotten: "+dateString);
		numberHyphen = (dateString.match(/-/g) || []).length;
		var dateFormatted = "";
		if(numberHyphen == 2){
			//console.log("2 hyphens");
			const [year, month, day] = dateString.split('-');
			dateFormatted += day;
			dateFormatted += ".";
			dateFormatted += month;
			dateFormatted += ".";
			dateFormatted += year;
		}
		if(numberHyphen == 1){
			//console.log("1 hyphen");
			const [year, month] = dateString.split('-');
			dateFormatted += month;
			dateFormatted += ".";
			dateFormatted += year;
		}
		if(numberHyphen == 0){
			//console.log("no hyphen");
			dateFormatted += dateString;
		}
		//console.log("returning: "+dateFormatted);
		return dateFormatted;
	}

</script>
