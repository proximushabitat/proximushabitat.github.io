---
---
<!doctype html>
<html>
  <head>
    <title>Floating UI Tutorial</title>
	<style>
		.toolTipTip {
			display: none;
			width: max-content;
			position: absolute;
			top: 0;
			left: 0;
			background: #222;
			color: white;
			font-weight: bold;
			padding: 5px;
			border-radius: 4px;
			font-size: 90%;
			max-width: calc(100vw - 10px);
		}
		.toolTipArrow {
			position: absolute;
			background: #222;
			width: 8px;
			height: 8px;
			transform: rotate(45deg);
			line-break: anywhere;
		}
	  </style>
  </head>
  <body>

    <span class="toolTipTool" aria-describedby="toolTip">
      My button 1
    	<span class="toolTipTip" role="toolTipTip">My toolTipTip 1<span class="toolTipArrow"></span></span>
	</span>

	<span class="toolTipTool" aria-describedby="toolTip">
		My button 2
		  <span class="toolTipTip" role="toolTipTip">My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 My toolTipTip 2 <span class="toolTipArrow"></span></span>
	</span>

	<span class="toolTipTool" aria-describedby="toolTip">
		My button 3
		  <span class="toolTipTip" role="toolTipTip">My toolTipTip 3<span class="toolTipArrow"></span></span>
	</span>

	<span class="toolTipTool" aria-describedby="toolTip">
		My button 4
		  <span class="toolTipTip" role="toolTipTip">My toolTipTip 4<span class="toolTipArrow"></span></span>
	</span>


    <script type="module">
      // Your code will go here.
    </script>
  </body>
</html>

<script>
	import {
		computePosition,
		flip,
		shift,
		offset,
		arrow,
	} from 'https://cdn.jsdelivr.net/npm/@floating-ui/dom@1.6.13/+esm';
	
	const toolTipTool = document.querySelectorAll('.toolTipTool');
	const toolTipTip = document.querySelectorAll('.toolTipTip');
	const arrowElement = document.querySelectorAll('.toolTipArrow');

	////////console.log.log("toolTipTool");
	////////console.log.log(toolTipTool);
	////////console.log.log("toolTipTool[0]");
	////////console.log.log(toolTipTool[0]);
	////////console.log.log("toolTipTool.length");
	////////console.log.log(toolTipTool.length);


	for(let i = 0; i < toolTipTool.length; i++){
		function update() {
			computePosition(toolTipTool[i], toolTipTip[i], {
				placement: 'top',
				middleware: [
					offset(6),
					flip(),
					shift({padding: 5}),
					arrow({element: arrowElement[i]}),
				],
			}).then(({x, y, placement, middlewareData}) => {
				////////console.log.log("placement");
				////////console.log.log(placement);
				////////console.log.log("placement");
				////////console.log.log(placement);

				Object.assign(toolTipTip[i].style, {
					left: `${x}px`,
					top: `${y}px`,
				});
				
				// Accessing the data
				const {x: arrowX, y: arrowY} = middlewareData.arrow;
				
				const staticSide = {
					top: 'bottom',
					right: 'left',
					bottom: 'top',
					left: 'right',
				}[placement.split('-')];

				////////console.log.log("staticSide");
				////////console.log.log(staticSide);
				
				Object.assign(arrowElement[i].style, {
					left: arrowX != null ? `${arrowX}px` : '',
					top: arrowY != null ? `${arrowY}px` : '',
					right: '',
					bottom: '',
					[staticSide]: '-4px',
				});
			});
		}

		function showTooltip() {
			toolTipTip[i].style.display = 'block';
			update();
		}
	
		function hideTooltip() {
			toolTipTip[i].style.display = '';
		}
	
		[
			['mouseenter', showTooltip],
			['mouseleave', hideTooltip],
			['focus', showTooltip],
			['blur', hideTooltip],
		].forEach(([event, listener]) => {
			toolTipTool[i].addEventListener(event, listener);
		});
	}
	
	
	
</script>